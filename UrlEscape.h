#pragma once
#pragma warning(push)
#pragma warning(disable: 4566)

#include <unordered_map>
#include <string>
#include <sstream>
#include <iomanip>

class UrlEscape {
public:
    static std::string url_encode(const std::string &value) {
        std::ostringstream escaped;
        escaped.fill('0');
        escaped << std::hex;

        for (std::string::const_iterator i = value.begin(), n = value.end(); i != n; ++i) {
            std::string::value_type c = (*i);

            // Keep alphanumeric and other accepted characters intact
            if (isalnum((unsigned char) c) || c == '-' || c == '_' || c == '.' || c == '~') {
                escaped << c;
                continue;
            }

            // Any other characters are percent-encoded
            escaped << std::uppercase;
            escaped << '%' << std::setw(2) << int((unsigned char) c);
            escaped << std::nouppercase;
        }

        return escaped.str();
    }

    static std::string url_decode(const std::string &value) {
        std::ostringstream decoded;
        decoded.fill('0');
        for (std::string::const_iterator i = value.begin(), n = value.end(); i != n; ++i) {
            if (*i == '%') {
                const auto ip1 = i + 1;
                const auto ip2 = i + 2;
                if (*ip1 && *ip2) {
                    unsigned char c = from_hex((unsigned char) *ip1) << 4 | from_hex((unsigned char) *ip2);
                    decoded << c;
                    i += 2;
                }
            } else if (*i == '+') {
                decoded << ' ';
            } else {
                decoded << *i;
            }
        }

        return decoded.str();
    }

    static void UrlDecode(std::string &url) {
        size_t pos = 0;
        goTo(url, "%", pos);
        while (pos != std::string::npos) {
            const auto toTest = url.substr(pos, 3);
            auto itr = _decodeUrlMap.find(toTest);
            if (itr->second == "u2") {
                auto uitr = _decodeUrlMapUnicode2.find(url.substr(pos, 6));
                if (uitr != _decodeUrlMapUnicode2.end()) {
                    url.replace(pos, uitr->first.size(), uitr->second);
                }
            } else if (itr->second == "u3") {
                auto uitr = _decodeUrlMapUnicode3.find(url.substr(pos, 9));
                if (uitr != _decodeUrlMapUnicode3.end()) {
                    url.replace(pos, uitr->first.size(), uitr->second);
                }
            } else if (itr != _decodeUrlMap.end()) {
                url.replace(pos, 3, itr->second);
            }

            goTo(url, "%", ++pos);
        }
    }

    static std::string DecodeUrl(std::string url) {
        size_t pos = 0;
        goTo(url, "%", pos);
        while (pos != std::string::npos) {
            auto itr = _decodeUrlMap.find(url.substr(pos, 3));
            if (itr != _decodeUrlMap.end()) {
                url.replace(pos, 3, itr->second);
            }
            goTo(url, "%", ++pos);
        }
        return url;
    }

    static void UrlEncode(std::string &url) {
        size_t pos = 0;
        goToOne(url, encodeString, pos);
        while (pos != std::string::npos) {
            const auto toTest = url.substr(pos, 1);
            auto itr = _encodeUrlMap.find(toTest);
            if (itr != _encodeUrlMap.end()) {
                url.replace(pos, 1, itr->second);
            }
            goToOne(url, encodeString, ++pos);
        }
    }

    static std::string EncodeUrl(std::string url) {
        size_t pos = 0;
        goToOne(url, encodeString, pos);
        while (pos != std::string::npos) {
            auto itr = _encodeUrlMap.find(url.substr(pos, 1));
            if (itr != _encodeUrlMap.end()) {
                url.replace(pos, 1, itr->second);
            }
            goToOne(url, encodeString, ++pos);
        }

        return url;
    }

private:
    static char from_hex(char ch) {
        return isdigit(ch) ? ch - '0' : tolower(ch) - 'a' + 10;
    }

    static inline const std::string goTo(const std::string &text, const std::string &toGoTo, size_t &pos) {
        size_t start = pos;
        pos = text.find(toGoTo, pos);
        return text.substr(start, pos - start);
    }

    static inline const std::string goToOne(const std::string &text, const std::string &goToOne, size_t &pos) {
        size_t start = pos;
        pos = text.find_first_of(goToOne, pos);
        return text.substr(start, pos - start);
    }

    static inline std::unordered_map<std::string, std::string> _decodeUrlMap = {
            {"%27", "'"},
            {"%28", "("},
            {"%29", ")"},
            {"%2A", "*"},
            {"%2B", "+"},
            {"%2C", ","},
            {"%2D", "-"},
            {"%2E", "."},
            {"%2F", "/"},
            {"%2a", "*"},
            {"%2b", "+"},
            {"%2c", ","},
            {"%2d", "-"},
            {"%2e", "."},
            {"%2f", "/"},
            {"%30", "0"},
            {"%31", "1"},
            {"%32", "2"},
            {"%33", "3"},
            {"%34", "4"},
            {"%35", "5"},
            {"%36", "6"},
            {"%37", "7"},
            {"%38", "8"},
            {"%39", "9"},
            {"%41", "A"},
            {"%42", "B"},
            {"%43", "C"},
            {"%44", "D"},
            {"%45", "E"},
            {"%46", "F"},
            {"%47", "G"},
            {"%48", "H"},
            {"%49", "I"},
            {"%4A", "J"},
            {"%4B", "K"},
            {"%4C", "L"},
            {"%4D", "M"},
            {"%4E", "N"},
            {"%4F", "O"},
            {"%4a", "j"},
            {"%4b", "k"},
            {"%4c", "l"},
            {"%4d", "m"},
            {"%4e", "n"},
            {"%4f", "o"},
            {"%50", "P"},
            {"%51", "Q"},
            {"%52", "R"},
            {"%53", "S"},
            {"%54", "T"},
            {"%55", "U"},
            {"%56", "V"},
            {"%57", "W"},
            {"%58", "X"},
            {"%59", "Y"},
            {"%5A", "Z"},
            {"%5F", "_"},
            {"%5a", "z"},
            {"%5f", "_"},
            {"%61", "a"},
            {"%62", "b"},
            {"%63", "c"},
            {"%64", "d"},
            {"%65", "e"},
            {"%66", "f"},
            {"%67", "g"},
            {"%68", "h"},
            {"%69", "i"},
            {"%6A", "j"},
            {"%6B", "k"},
            {"%6C", "l"},
            {"%6D", "m"},
            {"%6E", "n"},
            {"%6F", "o"},
            {"%6a", "j"},
            {"%6b", "k"},
            {"%6c", "l"},
            {"%6d", "m"},
            {"%6e", "n"},
            {"%6f", "o"},
            {"%70", "p"},
            {"%71", "q"},
            {"%72", "r"},
            {"%73", "s"},
            {"%74", "t"},
            {"%75", "u"},
            {"%76", "v"},
            {"%77", "w"},
            {"%78", "x"},
            {"%79", "y"},
            {"%7A", "z"},
            {"%7a", "z"},
            {"%20", " "},
            {"%21", "!"},
            {"%25", "%"},
            {"%2B", "+"},
            {"%2C", ","},
            {"%2F", "/"},
            {"%3A", ":"},
            {"%3B", ";"},
            {"%3C", "<"},
            {"%3D", "="},
            {"%3E", ">"},
            {"%3F", "?"},
            {"%2c", ","},
            {"%2f", "/"},
            {"%3a", ":"},
            {"%3b", ";"},
            {"%3c", "<"},
            {"%3d", "="},
            {"%3e", ">"},
            {"%3f", "?"},
            {"%40", "@"},
            {"%5B", "["},
            {"%5C", "\\"},
            {"%5D", "]"},
            {"%5E", "^"},
            {"%5b", "["},
            {"%5c", "\\"},
            {"%5d", "]"},
            {"%5e", "^"},
            {"%60", "`"},
            {"%7B", "{"},
            {"%7C", "|"},
            {"%7D", "}"},
            {"%7E", "~"},
            {"%2F", "/"},
            {"%7b", "{"},
            {"%7c", "|"},
            {"%7d", "}"},
            {"%7e", "~"},
            {"%80", "`"},
            {"%99", "â„¢"},
            {"%2f", "/"},
            {"%23", "#"},
            {"%27", "'"},
            {"%26", "&"},
            {"%E2", "u3"},
            {"%C3", "u2"},
            {"%C2", "u2"},
            {"%e2", "u3"},
            {"%c3", "u2"},
            {"%c2", "u2"},
    };
    static inline std::unordered_map<std::string, std::string> _decodeUrlMapUnicode2 = {
            {"%C2%A0", "\u00A0"},
            {"%C2%A1", "\u00A1"},
            {"%C2%A2", "\u00A2"},
            {"%C2%A3", "\u00A3"},
            {"%C2%A4", "\u00A4"},
            {"%C2%A5", "\u00A5"},
            {"%C2%A6", "\u00A6"},
            {"%C2%A7", "\u00A7"},
            {"%C2%A8", "\u00A8"},
            {"%C2%A9", "\u00A9"},
            {"%C2%AA", "\u00AA"},
            {"%C2%AB", "\u00AB"},
            {"%C2%AC", "\u00AC"},
            {"%C2%AE", "\u00AE"},
            {"%C2%AF", "\u00AF"},
            {"%C2%B0", "\u00B0"},
            {"%C2%B1", "\u00B1"},
            {"%C2%B2", "\u00B2"},
            {"%C2%B3", "\u00B3"},
            {"%C2%B4", "\u00B4"},
            {"%C2%B5", "\u00B5"},
            {"%C2%B6", "\u00B6"},
            {"%C2%B7", "\u00B7"},
            {"%C2%B8", "\u00B8"},
            {"%C2%B9", "\u00B9"},
            {"%C2%BA", "\u00BA"},
            {"%C2%BB", "\u00BB"},
            {"%C2%BC", "\u00BC"},
            {"%C2%BD", "\u00BD"},
            {"%C2%BE", "\u00BE"},
            {"%C2%BF", "\u00BF"},
            {"%C3%80", "\u00C0"},
            {"%C3%81", "\u00C1"},
            {"%C3%82", "\u00C2"},
            {"%C3%83", "\u00C3"},
            {"%C3%84", "\u00C4"},
            {"%C3%85", "\u00C5"},
            {"%C3%86", "\u00C6"},
            {"%C3%87", "\u00C7"},
            {"%C3%88", "\u00C8"},
            {"%C3%89", "\u00C9"},
            {"%C3%8A", "\u00CA"},
            {"%C3%8B", "\u00CB"},
            {"%C3%8C", "\u00CC"},
            {"%C3%8D", "\u00CD"},
            {"%C3%8E", "\u00CE"},
            {"%C3%8F", "\u00CF"},
            {"%C3%90", "\u00D0"},
            {"%C3%91", "\u00D1"},
            {"%C3%92", "\u00D2"},
            {"%C3%93", "\u00D3"},
            {"%C3%94", "\u00D4"},
            {"%C3%95", "\u00D5"},
            {"%C3%96", "\u00D6"},
            {"%C3%97", "\u00D7"},
            {"%C3%98", "\u00D8"},
            {"%C3%99", "\u00D9"},
            {"%C3%9A", "\u00DA"},
            {"%C3%9B", "\u00DB"},
            {"%C3%9C", "\u00DC"},
            {"%C3%9D", "\u00DD"},
            {"%C3%9E", "\u00DE"},
            {"%C3%9F", "\u00DF"},
            {"%C3%A0", "\u00E0"},
            {"%C3%A1", "\u00E1"},
            {"%C3%A2", "\u00E2"},
            {"%C3%A3", "\u00E3"},
            {"%C3%A4", "\u00E4"},
            {"%C3%A5", "\u00E5"},
            {"%C3%A6", "\u00E6"},
            {"%C3%A7", "\u00E7"},
            {"%C3%A8", "\u00E8"},
            {"%C3%A9", "\u00E9"},
            {"%C3%AA", "\u00EA"},
            {"%C3%AB", "\u00EB"},
            {"%C3%AC", "\u00EC"},
            {"%C3%AD", "\u00ED"},
            {"%C3%AE", "\u00EE"},
            {"%C3%AF", "\u00EF"},
            {"%C3%B0", "\u00F0"},
            {"%C3%B1", "\u00F1"},
            {"%C3%B2", "\u00F2"},
            {"%C3%B3", "\u00F3"},
            {"%C3%B4", "\u00F4"},
            {"%C3%B5", "\u00F5"},
            {"%C3%B6", "\u00F6"},
            {"%C3%B7", "\u00F7"},
            {"%C3%B8", "\u00F8"},
            {"%C3%B9", "\u00F9"},
            {"%C3%BA", "\u00FA"},
            {"%C3%BB", "\u00FB"},
            {"%C3%BC", "\u00FC"},
            {"%C3%BD", "\u00FD"},
            {"%C3%BE", "\u00FE"},
            {"%C3%BF", "\u00FF"},
    };
    static inline std::unordered_map<std::string, std::string> _decodeUrlMapUnicode3 = {
            {"%E2%80%99", "â€™"},
            {"%E2%98%80", "\u2600"},
            {"%E2%98%81", "\u2601"},
            {"%E2%98%82", "\u2602"},
            {"%E2%98%83", "\u2603"},
            {"%E2%98%84", "\u2604"},
            {"%E2%98%85", "\u2605"},
            {"%E2%98%86", "\u2606"},
            {"%E2%98%87", "\u2607"},
            {"%E2%98%88", "\u2608"},
            {"%E2%98%89", "\u2609"},
            {"%E2%98%8A", "\u260A"},
            {"%E2%98%8B", "\u260B"},
            {"%E2%98%8C", "\u260C"},
            {"%E2%98%8D", "\u260D"},
            {"%E2%98%8E", "\u260E"},
            {"%E2%98%8F", "\u260F"},
            {"%E2%98%90", "\u2610"},
            {"%E2%98%91", "\u2611"},
            {"%E2%98%92", "\u2612"},
            {"%E2%98%93", "\u2613"},
            {"%E2%98%94", "\u2614"},
            {"%E2%98%95", "\u2615"},
            {"%E2%98%96", "\u2616"},
            {"%E2%98%97", "\u2617"},
            {"%E2%98%98", "\u2618"},
            {"%E2%98%99", "\u2619"},
            {"%E2%98%9A", "\u261A"},
            {"%E2%98%9B", "\u261B"},
            {"%E2%98%9C", "\u261C"},
            {"%E2%98%9D", "\u261D"},
            {"%E2%98%9E", "\u261E"},
            {"%E2%98%9F", "\u261F"},
            {"%E2%98%A0", "\u2620"},
            {"%E2%98%A1", "\u2621"},
            {"%E2%98%A2", "\u2622"},
            {"%E2%98%A3", "\u2623"},
            {"%E2%98%A4", "\u2624"},
            {"%E2%98%A5", "\u2625"},
            {"%E2%98%A6", "\u2626"},
            {"%E2%98%A7", "\u2627"},
            {"%E2%98%A8", "\u2628"},
            {"%E2%98%A9", "\u2629"},
            {"%E2%98%AA", "\u262A"},
            {"%E2%98%AB", "\u262B"},
            {"%E2%98%AC", "\u262C"},
            {"%E2%98%AD", "\u262D"},
            {"%E2%98%AE", "\u262E"},
            {"%E2%98%AF", "\u262F"},
            {"%E2%98%B0", "\u2630"},
            {"%E2%98%B1", "\u2631"},
            {"%E2%98%B2", "\u2632"},
            {"%E2%98%B3", "\u2633"},
            {"%E2%98%B4", "\u2634"},
            {"%E2%98%B5", "\u2635"},
            {"%E2%98%B6", "\u2636"},
            {"%E2%98%B7", "\u2637"},
            {"%E2%98%B8", "\u2638"},
            {"%E2%98%B9", "\u2639"},
            {"%E2%98%BA", "\u263A"},
            {"%E2%98%BB", "\u263B"},
            {"%E2%98%BC", "\u263C"},
            {"%E2%98%BD", "\u263D"},
            {"%E2%98%BE", "\u263E"},
            {"%E2%98%BF", "\u263F"},
            {"%E2%99%80", "\u2640"},
            {"%E2%99%81", "\u2641"},
            {"%E2%99%82", "\u2642"},
            {"%E2%99%83", "\u2643"},
            {"%E2%99%84", "\u2644"},
            {"%E2%99%85", "\u2645"},
            {"%E2%99%86", "\u2646"},
            {"%E2%99%87", "\u2647"},
            {"%E2%99%88", "\u2648"},
            {"%E2%99%89", "\u2649"},
            {"%E2%99%8A", "\u264A"},
            {"%E2%99%8B", "\u264B"},
            {"%E2%99%8C", "\u264C"},
            {"%E2%99%8D", "\u264D"},
            {"%E2%99%8E", "\u264E"},
            {"%E2%99%8F", "\u264F"},
            {"%E2%99%90", "\u2650"},
            {"%E2%99%91", "\u2651"},
            {"%E2%99%92", "\u2652"},
            {"%E2%99%93", "\u2653"},
            {"%E2%99%94", "\u2654"},
            {"%E2%99%95", "\u2655"},
            {"%E2%99%96", "\u2656"},
            {"%E2%99%97", "\u2657"},
            {"%E2%99%98", "\u2658"},
            {"%E2%99%99", "\u2659"},
            {"%E2%99%9A", "\u265A"},
            {"%E2%99%9B", "\u265B"},
            {"%E2%99%9C", "\u265C"},
            {"%E2%99%9D", "\u265D"},
            {"%E2%99%9E", "\u265E"},
            {"%E2%99%9F", "\u265F"},
            {"%E2%99%A0", "\u2660"},
            {"%E2%99%A1", "\u2661"},
            {"%E2%99%A2", "\u2662"},
            {"%E2%99%A3", "\u2663"},
            {"%E2%99%A4", "\u2664"},
            {"%E2%99%A5", "\u2665"},
            {"%E2%99%A6", "\u2666"},
            {"%E2%99%A7", "\u2667"},
            {"%E2%99%A8", "\u2668"},
            {"%E2%99%A9", "\u2669"},
            {"%E2%99%AA", "\u266A"},
            {"%E2%99%AB", "\u266B"},
            {"%E2%99%AC", "\u266C"},
            {"%E2%99%AD", "\u266D"},
            {"%E2%99%AE", "\u266E"},
            {"%E2%99%AF", "\u266F"},
            {"%E2%99%B0", "\u2670"},
            {"%E2%99%B1", "\u2671"},
            {"%E2%99%B2", "\u2672"},
            {"%E2%99%B3", "\u2673"},
            {"%E2%99%B4", "\u2674"},
            {"%E2%99%B5", "\u2675"},
            {"%E2%99%B6", "\u2676"},
            {"%E2%99%B7", "\u2677"},
            {"%E2%99%B8", "\u2678"},
            {"%E2%99%B9", "\u2679"},
            {"%E2%99%BA", "\u267A"},
            {"%E2%99%BB", "\u267B"},
            {"%E2%99%BC", "\u267C"},
            {"%E2%99%BD", "\u267D"},
            {"%E2%99%BE", "\u267E"},
            {"%E2%99%BF", "\u267F"},
            {"%E2%94%80", "\u2500"},
            {"%E2%94%81", "\u2501"},
            {"%E2%94%82", "\u2502"},
            {"%E2%94%83", "\u2503"},
            {"%E2%94%84", "\u2504"},
            {"%E2%94%85", "\u2505"},
            {"%E2%94%86", "\u2506"},
            {"%E2%94%87", "\u2507"},
            {"%E2%94%88", "\u2508"},
            {"%E2%94%89", "\u2509"},
            {"%E2%94%8A", "\u250A"},
            {"%E2%94%8B", "\u250B"},
            {"%E2%94%8C", "\u250C"},
            {"%E2%94%8D", "\u250D"},
            {"%E2%94%8E", "\u250E"},
            {"%E2%94%8F", "\u250F"},
            {"%E2%94%90", "\u2510"},
            {"%E2%94%91", "\u2511"},
            {"%E2%94%92", "\u2512"},
            {"%E2%94%93", "\u2513"},
            {"%E2%94%94", "\u2514"},
            {"%E2%94%95", "\u2515"},
            {"%E2%94%96", "\u2516"},
            {"%E2%94%97", "\u2517"},
            {"%E2%94%98", "\u2518"},
            {"%E2%94%99", "\u2519"},
            {"%E2%94%9A", "\u251A"},
            {"%E2%94%9B", "\u251B"},
            {"%E2%94%9C", "\u251C"},
            {"%E2%94%9D", "\u251D"},
            {"%E2%94%9E", "\u251E"},
            {"%E2%94%9F", "\u251F"},
            {"%E2%94%A0", "\u2520"},
            {"%E2%94%A1", "\u2521"},
            {"%E2%94%A2", "\u2522"},
            {"%E2%94%A3", "\u2523"},
            {"%E2%94%A4", "\u2524"},
            {"%E2%94%A5", "\u2525"},
            {"%E2%94%A6", "\u2526"},
            {"%E2%94%A7", "\u2527"},
            {"%E2%94%A8", "\u2528"},
            {"%E2%94%A9", "\u2529"},
            {"%E2%94%AA", "\u252A"},
            {"%E2%94%AB", "\u252B"},
            {"%E2%94%AC", "\u252C"},
            {"%E2%94%AD", "\u252D"},
            {"%E2%94%AE", "\u252E"},
            {"%E2%94%AF", "\u252F"},
            {"%E2%94%B0", "\u2530"},
            {"%E2%94%B1", "\u2531"},
            {"%E2%94%B2", "\u2532"},
            {"%E2%94%B3", "\u2533"},
            {"%E2%94%B4", "\u2534"},
            {"%E2%94%B5", "\u2535"},
            {"%E2%94%B6", "\u2536"},
            {"%E2%94%B7", "\u2537"},
            {"%E2%94%B8", "\u2538"},
            {"%E2%94%B9", "\u2539"},
            {"%E2%94%BA", "\u253A"},
            {"%E2%94%BB", "\u253B"},
            {"%E2%94%BC", "\u253C"},
            {"%E2%94%BD", "\u253D"},
            {"%E2%94%BE", "\u253E"},
            {"%E2%94%BF", "\u253F"},
            {"%E2%95%80", "\u2540"},
            {"%E2%95%81", "\u2541"},
            {"%E2%95%82", "\u2542"},
            {"%E2%95%83", "\u2543"},
            {"%E2%95%84", "\u2544"},
            {"%E2%95%85", "\u2545"},
            {"%E2%95%86", "\u2546"},
            {"%E2%95%87", "\u2547"},
            {"%E2%95%88", "\u2548"},
            {"%E2%95%89", "\u2549"},
            {"%E2%95%8A", "\u254A"},
            {"%E2%95%8B", "\u254B"},
            {"%E2%95%8C", "\u254C"},
            {"%E2%95%8D", "\u254D"},
            {"%E2%95%8E", "\u254E"},
            {"%E2%95%8F", "\u254F"},
            {"%E2%95%90", "\u2550"},
            {"%E2%95%91", "\u2551"},
            {"%E2%95%92", "\u2552"},
            {"%E2%95%93", "\u2553"},
            {"%E2%95%94", "\u2554"},
            {"%E2%95%95", "\u2555"},
            {"%E2%95%96", "\u2556"},
            {"%E2%95%97", "\u2557"},
            {"%E2%95%98", "\u2558"},
            {"%E2%95%99", "\u2559"},
            {"%E2%95%9A", "\u255A"},
            {"%E2%95%9B", "\u255B"},
            {"%E2%95%9C", "\u255C"},
            {"%E2%95%9D", "\u255D"},
            {"%E2%95%9E", "\u255E"},
            {"%E2%95%9F", "\u255F"},
            {"%E2%95%A0", "\u2560"},
            {"%E2%95%A1", "\u2561"},
            {"%E2%95%A2", "\u2562"},
            {"%E2%95%A3", "\u2563"},
            {"%E2%95%A4", "\u2564"},
            {"%E2%95%A5", "\u2565"},
            {"%E2%95%A6", "\u2566"},
            {"%E2%95%A7", "\u2567"},
            {"%E2%95%A8", "\u2568"},
            {"%E2%95%A9", "\u2569"},
            {"%E2%95%AA", "\u256A"},
            {"%E2%95%AB", "\u256B"},
            {"%E2%95%AC", "\u256C"},
            {"%E2%95%AD", "\u256D"},
            {"%E2%95%AE", "\u256E"},
            {"%E2%95%AF", "\u256F"},
            {"%E2%95%B0", "\u2570"},
            {"%E2%95%B1", "\u2571"},
            {"%E2%95%B2", "\u2572"},
            {"%E2%95%B3", "\u2573"},
            {"%E2%95%B4", "\u2574"},
            {"%E2%95%B5", "\u2575"},
            {"%E2%95%B6", "\u2576"},
            {"%E2%95%B7", "\u2577"},
            {"%E2%95%B8", "\u2578"},
            {"%E2%95%B9", "\u2579"},
            {"%E2%95%BA", "\u257A"},
            {"%E2%95%BB", "\u257B"},
            {"%E2%95%BC", "\u257C"},
            {"%E2%95%BD", "\u257D"},
            {"%E2%95%BE", "\u257E"},
            {"%E2%95%BF", "\u257F"},
            {"%E2%96%80", "\u2580"},
            {"%E2%96%81", "\u2581"},
            {"%E2%96%82", "\u2582"},
            {"%E2%96%83", "\u2583"},
            {"%E2%96%84", "\u2584"},
            {"%E2%96%85", "\u2585"},
            {"%E2%96%86", "\u2586"},
            {"%E2%96%87", "\u2587"},
            {"%E2%96%88", "\u2588"},
            {"%E2%96%89", "\u2589"},
            {"%E2%96%8A", "\u258A"},
            {"%E2%96%8B", "\u258B"},
            {"%E2%96%8C", "\u258C"},
            {"%E2%96%8D", "\u258D"},
            {"%E2%96%8E", "\u258E"},
            {"%E2%96%8F", "\u258F"},
            {"%E2%96%90", "\u2590"},
            {"%E2%96%91", "\u2591"},
            {"%E2%96%92", "\u2592"},
            {"%E2%96%93", "\u2593"},
            {"%E2%96%94", "\u2594"},
            {"%E2%96%95", "\u2595"},
            {"%E2%96%96", "\u2596"},
            {"%E2%96%97", "\u2597"},
            {"%E2%96%98", "\u2598"},
            {"%E2%96%99", "\u2599"},
            {"%E2%96%9A", "\u259A"},
            {"%E2%96%9B", "\u259B"},
            {"%E2%96%9C", "\u259C"},
            {"%E2%96%9D", "\u259D"},
            {"%E2%96%9E", "\u259E"},
            {"%E2%96%9F", "\u259F"},
            {"%E2%96%A0", "\u25A0"},
            {"%E2%96%A1", "\u25A1"},
            {"%E2%96%A2", "\u25A2"},
            {"%E2%96%A3", "\u25A3"},
            {"%E2%96%A4", "\u25A4"},
            {"%E2%96%A5", "\u25A5"},
            {"%E2%96%A6", "\u25A6"},
            {"%E2%96%A7", "\u25A7"},
            {"%E2%96%A8", "\u25A8"},
            {"%E2%96%A9", "\u25A9"},
            {"%E2%96%AA", "\u25AA"},
            {"%E2%96%AB", "\u25AB"},
            {"%E2%96%AC", "\u25AC"},
            {"%E2%96%AD", "\u25AD"},
            {"%E2%96%AE", "\u25AE"},
            {"%E2%96%AF", "\u25AF"},
            {"%E2%96%B0", "\u25B0"},
            {"%E2%96%B1", "\u25B1"},
            {"%E2%96%B2", "\u25B2"},
            {"%E2%96%B3", "\u25B3"},
            {"%E2%96%B4", "\u25B4"},
            {"%E2%96%B5", "\u25B5"},
            {"%E2%96%B6", "\u25B6"},
            {"%E2%96%B7", "\u25B7"},
            {"%E2%96%B8", "\u25B8"},
            {"%E2%96%B9", "\u25B9"},
            {"%E2%96%BA", "\u25BA"},
            {"%E2%96%BB", "\u25BB"},
            {"%E2%96%BC", "\u25BC"},
            {"%E2%96%BD", "\u25BD"},
            {"%E2%96%BE", "\u25BE"},
            {"%E2%96%BF", "\u25BF"},
            {"%E2%97%80", "\u25C0"},
            {"%E2%97%81", "\u25C1"},
            {"%E2%97%82", "\u25C2"},
            {"%E2%97%83", "\u25C3"},
            {"%E2%97%84", "\u25C4"},
            {"%E2%97%85", "\u25C5"},
            {"%E2%97%86", "\u25C6"},
            {"%E2%97%87", "\u25C7"},
            {"%E2%97%88", "\u25C8"},
            {"%E2%97%89", "\u25C9"},
            {"%E2%97%8A", "\u25CA"},
            {"%E2%97%8B", "\u25CB"},
            {"%E2%97%8C", "\u25CC"},
            {"%E2%97%8D", "\u25CD"},
            {"%E2%97%8E", "\u25CE"},
            {"%E2%97%8F", "\u25CF"},
            {"%E2%97%90", "\u25D0"},
            {"%E2%97%91", "\u25D1"},
            {"%E2%97%92", "\u25D2"},
            {"%E2%97%93", "\u25D3"},
            {"%E2%97%94", "\u25D4"},
            {"%E2%97%95", "\u25D5"},
            {"%E2%97%96", "\u25D6"},
            {"%E2%97%97", "\u25D7"},
            {"%E2%97%98", "\u25D8"},
            {"%E2%97%99", "\u25D9"},
            {"%E2%97%9A", "\u25DA"},
            {"%E2%97%9B", "\u25DB"},
            {"%E2%97%9C", "\u25DC"},
            {"%E2%97%9D", "\u25DD"},
            {"%E2%97%9E", "\u25DE"},
            {"%E2%97%9F", "\u25DF"},
            {"%E2%97%A0", "\u25E0"},
            {"%E2%97%A1", "\u25E1"},
            {"%E2%97%A2", "\u25E2"},
            {"%E2%97%A3", "\u25E3"},
            {"%E2%97%A4", "\u25E4"},
            {"%E2%97%A5", "\u25E5"},
            {"%E2%97%A6", "\u25E6"},
            {"%E2%97%A7", "\u25E7"},
            {"%E2%97%A8", "\u25E8"},
            {"%E2%97%A9", "\u25E9"},
            {"%E2%97%AA", "\u25EA"},
            {"%E2%97%AB", "\u25EB"},
            {"%E2%97%AC", "\u25EC"},
            {"%E2%97%AD", "\u25ED"},
            {"%E2%97%AE", "\u25EE"},
            {"%E2%97%AF", "\u25EF"},
            {"%E2%97%B0", "\u25F0"},
            {"%E2%97%B1", "\u25F1"},
            {"%E2%97%B2", "\u25F2"},
            {"%E2%97%B3", "\u25F3"},
            {"%E2%97%B4", "\u25F4"},
            {"%E2%97%B5", "\u25F5"},
            {"%E2%97%B6", "\u25F6"},
            {"%E2%97%B7", "\u25F7"},
            {"%E2%97%B8", "\u25F8"},
            {"%E2%97%B9", "\u25F9"},
            {"%E2%97%BA", "\u25FA"},
            {"%E2%97%BB", "\u25FB"},
            {"%E2%97%BC", "\u25FC"},
            {"%E2%97%BD", "\u25FD"},
            {"%E2%97%BE", "\u25FE"},
            {"%E2%97%BF", "\u25FF"},
    };


    static inline std::unordered_map<std::string, std::string> _encodeUrlMap = {
            {" ",  "%20"},
            {"!",  "%21"},
            {"%",  "%25"},
            {"+",  "%2B"},
            {",",  "%2C"},
            {";",  "%3B"},
            {"<",  "%3C"},
            {"=",  "%3D"},
            {">",  "%3E"},
            {"?",  "%3F"},
            {"@",  "%40"},
            {"[",  "%5B"},
            {"\\", "%5C"},
            {"]",  "%5D"},
            {"^",  "%5E"},
            {"`",  "%60"},
            {"{",  "%7B"},
            {"|",  "%7C"},
            {"}",  "%7D"},
            {"~",  "%7E"},
            {"/",  "%2F"},
            {"#",  "%23"},
            {"'",  "%27"},
            {"&",  "%26"},
    };

    static inline std::string encodeString = " !%+,:;<=>?@[\\]^`{|}~/#&'";
};

#pragma warning(pop)